// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package wechatmsg

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Touser
//  - Content
type AlarmMsgRequest struct {
  Touser string `thrift:"touser,1,required" db:"touser" json:"touser"`
  Content string `thrift:"content,2,required" db:"content" json:"content"`
}

func NewAlarmMsgRequest() *AlarmMsgRequest {
  return &AlarmMsgRequest{}
}


func (p *AlarmMsgRequest) GetTouser() string {
  return p.Touser
}

func (p *AlarmMsgRequest) GetContent() string {
  return p.Content
}
func (p *AlarmMsgRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTouser bool = false;
  var issetContent bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetTouser = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetContent = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTouser{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Touser is not set"));
  }
  if !issetContent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Content is not set"));
  }
  return nil
}

func (p *AlarmMsgRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Touser = v
}
  return nil
}

func (p *AlarmMsgRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *AlarmMsgRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AlarmMsgRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlarmMsgRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("touser", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:touser: ", p), err) }
  if err := oprot.WriteString(string(p.Touser)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.touser (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:touser: ", p), err) }
  return err
}

func (p *AlarmMsgRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:content: ", p), err) }
  return err
}

func (p *AlarmMsgRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlarmMsgRequest(%+v)", *p)
}

// Attributes:
//  - Errcode
//  - Errmsg
//  - Invaliduser
type AlarmMsgResponse struct {
  Errcode *int32 `thrift:"errcode,1" db:"errcode" json:"errcode,omitempty"`
  Errmsg *string `thrift:"errmsg,2" db:"errmsg" json:"errmsg,omitempty"`
  Invaliduser *string `thrift:"invaliduser,3" db:"invaliduser" json:"invaliduser,omitempty"`
}

func NewAlarmMsgResponse() *AlarmMsgResponse {
  return &AlarmMsgResponse{}
}

var AlarmMsgResponse_Errcode_DEFAULT int32
func (p *AlarmMsgResponse) GetErrcode() int32 {
  if !p.IsSetErrcode() {
    return AlarmMsgResponse_Errcode_DEFAULT
  }
return *p.Errcode
}
var AlarmMsgResponse_Errmsg_DEFAULT string
func (p *AlarmMsgResponse) GetErrmsg() string {
  if !p.IsSetErrmsg() {
    return AlarmMsgResponse_Errmsg_DEFAULT
  }
return *p.Errmsg
}
var AlarmMsgResponse_Invaliduser_DEFAULT string
func (p *AlarmMsgResponse) GetInvaliduser() string {
  if !p.IsSetInvaliduser() {
    return AlarmMsgResponse_Invaliduser_DEFAULT
  }
return *p.Invaliduser
}
func (p *AlarmMsgResponse) IsSetErrcode() bool {
  return p.Errcode != nil
}

func (p *AlarmMsgResponse) IsSetErrmsg() bool {
  return p.Errmsg != nil
}

func (p *AlarmMsgResponse) IsSetInvaliduser() bool {
  return p.Invaliduser != nil
}

func (p *AlarmMsgResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlarmMsgResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Errcode = &v
}
  return nil
}

func (p *AlarmMsgResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Errmsg = &v
}
  return nil
}

func (p *AlarmMsgResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Invaliduser = &v
}
  return nil
}

func (p *AlarmMsgResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AlarmMsgResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlarmMsgResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrcode() {
    if err := oprot.WriteFieldBegin("errcode", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errcode: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Errcode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errcode (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errcode: ", p), err) }
  }
  return err
}

func (p *AlarmMsgResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrmsg() {
    if err := oprot.WriteFieldBegin("errmsg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errmsg: ", p), err) }
    if err := oprot.WriteString(string(*p.Errmsg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errmsg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errmsg: ", p), err) }
  }
  return err
}

func (p *AlarmMsgResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInvaliduser() {
    if err := oprot.WriteFieldBegin("invaliduser", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invaliduser: ", p), err) }
    if err := oprot.WriteString(string(*p.Invaliduser)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.invaliduser (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invaliduser: ", p), err) }
  }
  return err
}

func (p *AlarmMsgResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlarmMsgResponse(%+v)", *p)
}

// Attributes:
//  - Message
//  - CallStack
//  - Date
//  - Code
type AlarmMsgException struct {
  Message *string `thrift:"message,1" db:"message" json:"message,omitempty"`
  CallStack *string `thrift:"callStack,2" db:"callStack" json:"callStack,omitempty"`
  Date *string `thrift:"date,3" db:"date" json:"date,omitempty"`
  Code *int32 `thrift:"code,4" db:"code" json:"code,omitempty"`
}

func NewAlarmMsgException() *AlarmMsgException {
  return &AlarmMsgException{}
}

var AlarmMsgException_Message_DEFAULT string
func (p *AlarmMsgException) GetMessage() string {
  if !p.IsSetMessage() {
    return AlarmMsgException_Message_DEFAULT
  }
return *p.Message
}
var AlarmMsgException_CallStack_DEFAULT string
func (p *AlarmMsgException) GetCallStack() string {
  if !p.IsSetCallStack() {
    return AlarmMsgException_CallStack_DEFAULT
  }
return *p.CallStack
}
var AlarmMsgException_Date_DEFAULT string
func (p *AlarmMsgException) GetDate() string {
  if !p.IsSetDate() {
    return AlarmMsgException_Date_DEFAULT
  }
return *p.Date
}
var AlarmMsgException_Code_DEFAULT int32
func (p *AlarmMsgException) GetCode() int32 {
  if !p.IsSetCode() {
    return AlarmMsgException_Code_DEFAULT
  }
return *p.Code
}
func (p *AlarmMsgException) IsSetMessage() bool {
  return p.Message != nil
}

func (p *AlarmMsgException) IsSetCallStack() bool {
  return p.CallStack != nil
}

func (p *AlarmMsgException) IsSetDate() bool {
  return p.Date != nil
}

func (p *AlarmMsgException) IsSetCode() bool {
  return p.Code != nil
}

func (p *AlarmMsgException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlarmMsgException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *AlarmMsgException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CallStack = &v
}
  return nil
}

func (p *AlarmMsgException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Date = &v
}
  return nil
}

func (p *AlarmMsgException)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Code = &v
}
  return nil
}

func (p *AlarmMsgException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AlarmMsgException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlarmMsgException) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  }
  return err
}

func (p *AlarmMsgException) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCallStack() {
    if err := oprot.WriteFieldBegin("callStack", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:callStack: ", p), err) }
    if err := oprot.WriteString(string(*p.CallStack)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.callStack (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:callStack: ", p), err) }
  }
  return err
}

func (p *AlarmMsgException) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDate() {
    if err := oprot.WriteFieldBegin("date", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:date: ", p), err) }
    if err := oprot.WriteString(string(*p.Date)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.date (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:date: ", p), err) }
  }
  return err
}

func (p *AlarmMsgException) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetCode() {
    if err := oprot.WriteFieldBegin("code", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:code: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Code)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.code (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:code: ", p), err) }
  }
  return err
}

func (p *AlarmMsgException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlarmMsgException(%+v)", *p)
}

func (p *AlarmMsgException) Error() string {
  return p.String()
}

type WechatAlarmMsgService interface {
  // Parameters:
  //  - AlarmMsgRequest
  SendAlarmMsg(ctx context.Context, AlarmMsgRequest *AlarmMsgRequest) (r *AlarmMsgResponse, err error)
}

type WechatAlarmMsgServiceClient struct {
  c thrift.TClient
}

func NewWechatAlarmMsgServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WechatAlarmMsgServiceClient {
  return &WechatAlarmMsgServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewWechatAlarmMsgServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WechatAlarmMsgServiceClient {
  return &WechatAlarmMsgServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewWechatAlarmMsgServiceClient(c thrift.TClient) *WechatAlarmMsgServiceClient {
  return &WechatAlarmMsgServiceClient{
    c: c,
  }
}

func (p *WechatAlarmMsgServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - AlarmMsgRequest
func (p *WechatAlarmMsgServiceClient) SendAlarmMsg(ctx context.Context, AlarmMsgRequest *AlarmMsgRequest) (r *AlarmMsgResponse, err error) {
  var _args0 WechatAlarmMsgServiceSendAlarmMsgArgs
  _args0.AlarmMsgRequest = AlarmMsgRequest
  var _result1 WechatAlarmMsgServiceSendAlarmMsgResult
  if err = p.Client_().Call(ctx, "sendAlarmMsg", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.AlarmMsgException!= nil:
    return r, _result1.AlarmMsgException
  }

  return _result1.GetSuccess(), nil
}

type WechatAlarmMsgServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler WechatAlarmMsgService
}

func (p *WechatAlarmMsgServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *WechatAlarmMsgServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *WechatAlarmMsgServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewWechatAlarmMsgServiceProcessor(handler WechatAlarmMsgService) *WechatAlarmMsgServiceProcessor {

  self2 := &WechatAlarmMsgServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["sendAlarmMsg"] = &wechatAlarmMsgServiceProcessorSendAlarmMsg{handler:handler}
return self2
}

func (p *WechatAlarmMsgServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type wechatAlarmMsgServiceProcessorSendAlarmMsg struct {
  handler WechatAlarmMsgService
}

func (p *wechatAlarmMsgServiceProcessorSendAlarmMsg) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := WechatAlarmMsgServiceSendAlarmMsgArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendAlarmMsg", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := WechatAlarmMsgServiceSendAlarmMsgResult{}
var retval *AlarmMsgResponse
  var err2 error
  if retval, err2 = p.handler.SendAlarmMsg(ctx, args.AlarmMsgRequest); err2 != nil {
  switch v := err2.(type) {
    case *AlarmMsgException:
  result.AlarmMsgException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendAlarmMsg: " + err2.Error())
    oprot.WriteMessageBegin("sendAlarmMsg", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sendAlarmMsg", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - AlarmMsgRequest
type WechatAlarmMsgServiceSendAlarmMsgArgs struct {
  AlarmMsgRequest *AlarmMsgRequest `thrift:"AlarmMsgRequest,1,required" db:"AlarmMsgRequest" json:"AlarmMsgRequest"`
}

func NewWechatAlarmMsgServiceSendAlarmMsgArgs() *WechatAlarmMsgServiceSendAlarmMsgArgs {
  return &WechatAlarmMsgServiceSendAlarmMsgArgs{}
}

var WechatAlarmMsgServiceSendAlarmMsgArgs_AlarmMsgRequest_DEFAULT *AlarmMsgRequest
func (p *WechatAlarmMsgServiceSendAlarmMsgArgs) GetAlarmMsgRequest() *AlarmMsgRequest {
  if !p.IsSetAlarmMsgRequest() {
    return WechatAlarmMsgServiceSendAlarmMsgArgs_AlarmMsgRequest_DEFAULT
  }
return p.AlarmMsgRequest
}
func (p *WechatAlarmMsgServiceSendAlarmMsgArgs) IsSetAlarmMsgRequest() bool {
  return p.AlarmMsgRequest != nil
}

func (p *WechatAlarmMsgServiceSendAlarmMsgArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAlarmMsgRequest bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetAlarmMsgRequest = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAlarmMsgRequest{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AlarmMsgRequest is not set"));
  }
  return nil
}

func (p *WechatAlarmMsgServiceSendAlarmMsgArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AlarmMsgRequest = &AlarmMsgRequest{}
  if err := p.AlarmMsgRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AlarmMsgRequest), err)
  }
  return nil
}

func (p *WechatAlarmMsgServiceSendAlarmMsgArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendAlarmMsg_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WechatAlarmMsgServiceSendAlarmMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AlarmMsgRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:AlarmMsgRequest: ", p), err) }
  if err := p.AlarmMsgRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AlarmMsgRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:AlarmMsgRequest: ", p), err) }
  return err
}

func (p *WechatAlarmMsgServiceSendAlarmMsgArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WechatAlarmMsgServiceSendAlarmMsgArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - AlarmMsgException
type WechatAlarmMsgServiceSendAlarmMsgResult struct {
  Success *AlarmMsgResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  AlarmMsgException *AlarmMsgException `thrift:"alarmMsgException,1" db:"alarmMsgException" json:"alarmMsgException,omitempty"`
}

func NewWechatAlarmMsgServiceSendAlarmMsgResult() *WechatAlarmMsgServiceSendAlarmMsgResult {
  return &WechatAlarmMsgServiceSendAlarmMsgResult{}
}

var WechatAlarmMsgServiceSendAlarmMsgResult_Success_DEFAULT *AlarmMsgResponse
func (p *WechatAlarmMsgServiceSendAlarmMsgResult) GetSuccess() *AlarmMsgResponse {
  if !p.IsSetSuccess() {
    return WechatAlarmMsgServiceSendAlarmMsgResult_Success_DEFAULT
  }
return p.Success
}
var WechatAlarmMsgServiceSendAlarmMsgResult_AlarmMsgException_DEFAULT *AlarmMsgException
func (p *WechatAlarmMsgServiceSendAlarmMsgResult) GetAlarmMsgException() *AlarmMsgException {
  if !p.IsSetAlarmMsgException() {
    return WechatAlarmMsgServiceSendAlarmMsgResult_AlarmMsgException_DEFAULT
  }
return p.AlarmMsgException
}
func (p *WechatAlarmMsgServiceSendAlarmMsgResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *WechatAlarmMsgServiceSendAlarmMsgResult) IsSetAlarmMsgException() bool {
  return p.AlarmMsgException != nil
}

func (p *WechatAlarmMsgServiceSendAlarmMsgResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WechatAlarmMsgServiceSendAlarmMsgResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AlarmMsgResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *WechatAlarmMsgServiceSendAlarmMsgResult)  ReadField1(iprot thrift.TProtocol) error {
  p.AlarmMsgException = &AlarmMsgException{}
  if err := p.AlarmMsgException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AlarmMsgException), err)
  }
  return nil
}

func (p *WechatAlarmMsgServiceSendAlarmMsgResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendAlarmMsg_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WechatAlarmMsgServiceSendAlarmMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *WechatAlarmMsgServiceSendAlarmMsgResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAlarmMsgException() {
    if err := oprot.WriteFieldBegin("alarmMsgException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:alarmMsgException: ", p), err) }
    if err := p.AlarmMsgException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AlarmMsgException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:alarmMsgException: ", p), err) }
  }
  return err
}

func (p *WechatAlarmMsgServiceSendAlarmMsgResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WechatAlarmMsgServiceSendAlarmMsgResult(%+v)", *p)
}


