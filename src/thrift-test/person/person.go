// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package person

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Username
//  - Age
//  - Married
type Person struct {
  Username *string `thrift:"username,1" db:"username" json:"username,omitempty"`
  Age *int32 `thrift:"age,2" db:"age" json:"age,omitempty"`
  Married *bool `thrift:"married,3" db:"married" json:"married,omitempty"`
}

func NewPerson() *Person {
  return &Person{}
}

var Person_Username_DEFAULT string
func (p *Person) GetUsername() string {
  if !p.IsSetUsername() {
    return Person_Username_DEFAULT
  }
return *p.Username
}
var Person_Age_DEFAULT int32
func (p *Person) GetAge() int32 {
  if !p.IsSetAge() {
    return Person_Age_DEFAULT
  }
return *p.Age
}
var Person_Married_DEFAULT bool
func (p *Person) GetMarried() bool {
  if !p.IsSetMarried() {
    return Person_Married_DEFAULT
  }
return *p.Married
}
func (p *Person) IsSetUsername() bool {
  return p.Username != nil
}

func (p *Person) IsSetAge() bool {
  return p.Age != nil
}

func (p *Person) IsSetMarried() bool {
  return p.Married != nil
}

func (p *Person) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Person)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = &v
}
  return nil
}

func (p *Person)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Age = &v
}
  return nil
}

func (p *Person)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Married = &v
}
  return nil
}

func (p *Person) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Person"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Person) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUsername() {
    if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
    if err := oprot.WriteString(string(*p.Username)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  }
  return err
}

func (p *Person) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAge() {
    if err := oprot.WriteFieldBegin("age", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:age: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Age)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.age (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:age: ", p), err) }
  }
  return err
}

func (p *Person) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMarried() {
    if err := oprot.WriteFieldBegin("married", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:married: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Married)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.married (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:married: ", p), err) }
  }
  return err
}

func (p *Person) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Person(%+v)", *p)
}

// Attributes:
//  - Message
//  - CallStack
//  - Date
//  - Code
type PersonException struct {
  Message *string `thrift:"message,1" db:"message" json:"message,omitempty"`
  CallStack *string `thrift:"callStack,2" db:"callStack" json:"callStack,omitempty"`
  Date *string `thrift:"date,3" db:"date" json:"date,omitempty"`
  Code *int32 `thrift:"code,4" db:"code" json:"code,omitempty"`
}

func NewPersonException() *PersonException {
  return &PersonException{}
}

var PersonException_Message_DEFAULT string
func (p *PersonException) GetMessage() string {
  if !p.IsSetMessage() {
    return PersonException_Message_DEFAULT
  }
return *p.Message
}
var PersonException_CallStack_DEFAULT string
func (p *PersonException) GetCallStack() string {
  if !p.IsSetCallStack() {
    return PersonException_CallStack_DEFAULT
  }
return *p.CallStack
}
var PersonException_Date_DEFAULT string
func (p *PersonException) GetDate() string {
  if !p.IsSetDate() {
    return PersonException_Date_DEFAULT
  }
return *p.Date
}
var PersonException_Code_DEFAULT int32
func (p *PersonException) GetCode() int32 {
  if !p.IsSetCode() {
    return PersonException_Code_DEFAULT
  }
return *p.Code
}
func (p *PersonException) IsSetMessage() bool {
  return p.Message != nil
}

func (p *PersonException) IsSetCallStack() bool {
  return p.CallStack != nil
}

func (p *PersonException) IsSetDate() bool {
  return p.Date != nil
}

func (p *PersonException) IsSetCode() bool {
  return p.Code != nil
}

func (p *PersonException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PersonException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *PersonException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CallStack = &v
}
  return nil
}

func (p *PersonException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Date = &v
}
  return nil
}

func (p *PersonException)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Code = &v
}
  return nil
}

func (p *PersonException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PersonException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PersonException) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  }
  return err
}

func (p *PersonException) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCallStack() {
    if err := oprot.WriteFieldBegin("callStack", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:callStack: ", p), err) }
    if err := oprot.WriteString(string(*p.CallStack)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.callStack (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:callStack: ", p), err) }
  }
  return err
}

func (p *PersonException) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDate() {
    if err := oprot.WriteFieldBegin("date", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:date: ", p), err) }
    if err := oprot.WriteString(string(*p.Date)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.date (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:date: ", p), err) }
  }
  return err
}

func (p *PersonException) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetCode() {
    if err := oprot.WriteFieldBegin("code", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:code: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Code)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.code (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:code: ", p), err) }
  }
  return err
}

func (p *PersonException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PersonException(%+v)", *p)
}

func (p *PersonException) Error() string {
  return p.String()
}

type PersonService interface {
  // Parameters:
  //  - Username
  GetPersonByUsername(ctx context.Context, username string) (r *Person, err error)
  // Parameters:
  //  - Person
  SavePerson(ctx context.Context, person *Person) (r *Person, err error)
}

type PersonServiceClient struct {
  c thrift.TClient
}

func NewPersonServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PersonServiceClient {
  return &PersonServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewPersonServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PersonServiceClient {
  return &PersonServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewPersonServiceClient(c thrift.TClient) *PersonServiceClient {
  return &PersonServiceClient{
    c: c,
  }
}

func (p *PersonServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Username
func (p *PersonServiceClient) GetPersonByUsername(ctx context.Context, username string) (r *Person, err error) {
  var _args0 PersonServiceGetPersonByUsernameArgs
  _args0.Username = username
  var _result1 PersonServiceGetPersonByUsernameResult
  if err = p.Client_().Call(ctx, "getPersonByUsername", &_args0, &_result1); err != nil {
    fmt.Printf("getPersonByUsername err: %v \n", err)
    return
  }
  switch {
  case _result1.PersonException!= nil:
    return r, _result1.PersonException
  }

  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Person
func (p *PersonServiceClient) SavePerson(ctx context.Context, person *Person) (r *Person, err error) {
  var _args2 PersonServiceSavePersonArgs
  _args2.Person = person
  var _result3 PersonServiceSavePersonResult
  if err = p.Client_().Call(ctx, "savePerson", &_args2, &_result3); err != nil {
    fmt.Printf("SavePerson err: %v \n", err)
    return
  }
  switch {
  case _result3.PersonException!= nil:
    return r, _result3.PersonException
  }

  return _result3.GetSuccess(), nil
}

type PersonServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PersonService
}

func (p *PersonServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PersonServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PersonServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPersonServiceProcessor(handler PersonService) *PersonServiceProcessor {

  self4 := &PersonServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["getPersonByUsername"] = &personServiceProcessorGetPersonByUsername{handler:handler}
  self4.processorMap["savePerson"] = &personServiceProcessorSavePerson{handler:handler}
return self4
}

func (p *PersonServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type personServiceProcessorGetPersonByUsername struct {
  handler PersonService
}

func (p *personServiceProcessorGetPersonByUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PersonServiceGetPersonByUsernameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getPersonByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PersonServiceGetPersonByUsernameResult{}
var retval *Person
  var err2 error
  if retval, err2 = p.handler.GetPersonByUsername(ctx, args.Username); err2 != nil {
  switch v := err2.(type) {
    case *PersonException:
  result.PersonException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPersonByUsername: " + err2.Error())
    oprot.WriteMessageBegin("getPersonByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getPersonByUsername", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type personServiceProcessorSavePerson struct {
  handler PersonService
}

func (p *personServiceProcessorSavePerson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PersonServiceSavePersonArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("savePerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PersonServiceSavePersonResult{}
var retval *Person
  var err2 error
  if retval, err2 = p.handler.SavePerson(ctx, args.Person); err2 != nil {
  switch v := err2.(type) {
    case *PersonException:
  result.PersonException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing savePerson: " + err2.Error())
    oprot.WriteMessageBegin("savePerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("savePerson", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Username
type PersonServiceGetPersonByUsernameArgs struct {
  Username string `thrift:"username,1,required" db:"username" json:"username"`
}

func NewPersonServiceGetPersonByUsernameArgs() *PersonServiceGetPersonByUsernameArgs {
  return &PersonServiceGetPersonByUsernameArgs{}
}


func (p *PersonServiceGetPersonByUsernameArgs) GetUsername() string {
  return p.Username
}
func (p *PersonServiceGetPersonByUsernameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUsername bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetUsername = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUsername{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Username is not set"));
  }
  return nil
}

func (p *PersonServiceGetPersonByUsernameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *PersonServiceGetPersonByUsernameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPersonByUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PersonServiceGetPersonByUsernameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *PersonServiceGetPersonByUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PersonServiceGetPersonByUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - PersonException
type PersonServiceGetPersonByUsernameResult struct {
  Success *Person `thrift:"success,0" db:"success" json:"success,omitempty"`
  PersonException *PersonException `thrift:"personException,1" db:"personException" json:"personException,omitempty"`
}

func NewPersonServiceGetPersonByUsernameResult() *PersonServiceGetPersonByUsernameResult {
  return &PersonServiceGetPersonByUsernameResult{}
}

var PersonServiceGetPersonByUsernameResult_Success_DEFAULT *Person
func (p *PersonServiceGetPersonByUsernameResult) GetSuccess() *Person {
  if !p.IsSetSuccess() {
    return PersonServiceGetPersonByUsernameResult_Success_DEFAULT
  }
return p.Success
}
var PersonServiceGetPersonByUsernameResult_PersonException_DEFAULT *PersonException
func (p *PersonServiceGetPersonByUsernameResult) GetPersonException() *PersonException {
  if !p.IsSetPersonException() {
    return PersonServiceGetPersonByUsernameResult_PersonException_DEFAULT
  }
return p.PersonException
}
func (p *PersonServiceGetPersonByUsernameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PersonServiceGetPersonByUsernameResult) IsSetPersonException() bool {
  return p.PersonException != nil
}

func (p *PersonServiceGetPersonByUsernameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PersonServiceGetPersonByUsernameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Person{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PersonServiceGetPersonByUsernameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.PersonException = &PersonException{}
  if err := p.PersonException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PersonException), err)
  }
  return nil
}

func (p *PersonServiceGetPersonByUsernameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPersonByUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PersonServiceGetPersonByUsernameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PersonServiceGetPersonByUsernameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPersonException() {
    if err := oprot.WriteFieldBegin("personException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:personException: ", p), err) }
    if err := p.PersonException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PersonException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:personException: ", p), err) }
  }
  return err
}

func (p *PersonServiceGetPersonByUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PersonServiceGetPersonByUsernameResult(%+v)", *p)
}

// Attributes:
//  - Person
type PersonServiceSavePersonArgs struct {
  Person *Person `thrift:"person,1,required" db:"person" json:"person"`
}

func NewPersonServiceSavePersonArgs() *PersonServiceSavePersonArgs {
  return &PersonServiceSavePersonArgs{}
}

var PersonServiceSavePersonArgs_Person_DEFAULT *Person
func (p *PersonServiceSavePersonArgs) GetPerson() *Person {
  if !p.IsSetPerson() {
    return PersonServiceSavePersonArgs_Person_DEFAULT
  }
return p.Person
}
func (p *PersonServiceSavePersonArgs) IsSetPerson() bool {
  return p.Person != nil
}

func (p *PersonServiceSavePersonArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPerson bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPerson = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPerson{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Person is not set"));
  }
  return nil
}

func (p *PersonServiceSavePersonArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Person = &Person{}
  if err := p.Person.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Person), err)
  }
  return nil
}

func (p *PersonServiceSavePersonArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("savePerson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PersonServiceSavePersonArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("person", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:person: ", p), err) }
  if err := p.Person.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Person), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:person: ", p), err) }
  return err
}

func (p *PersonServiceSavePersonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PersonServiceSavePersonArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - PersonException
type PersonServiceSavePersonResult struct {
  Success *Person `thrift:"success,0" db:"success" json:"success,omitempty"`
  PersonException *PersonException `thrift:"personException,1" db:"personException" json:"personException,omitempty"`
}

func NewPersonServiceSavePersonResult() *PersonServiceSavePersonResult {
  return &PersonServiceSavePersonResult{}
}

var PersonServiceSavePersonResult_Success_DEFAULT *Person
func (p *PersonServiceSavePersonResult) GetSuccess() *Person {
  if !p.IsSetSuccess() {
    return PersonServiceSavePersonResult_Success_DEFAULT
  }
return p.Success
}
var PersonServiceSavePersonResult_PersonException_DEFAULT *PersonException
func (p *PersonServiceSavePersonResult) GetPersonException() *PersonException {
  if !p.IsSetPersonException() {
    return PersonServiceSavePersonResult_PersonException_DEFAULT
  }
return p.PersonException
}
func (p *PersonServiceSavePersonResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PersonServiceSavePersonResult) IsSetPersonException() bool {
  return p.PersonException != nil
}

func (p *PersonServiceSavePersonResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PersonServiceSavePersonResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Person{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PersonServiceSavePersonResult)  ReadField1(iprot thrift.TProtocol) error {
  p.PersonException = &PersonException{}
  if err := p.PersonException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PersonException), err)
  }
  return nil
}

func (p *PersonServiceSavePersonResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("savePerson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PersonServiceSavePersonResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PersonServiceSavePersonResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPersonException() {
    if err := oprot.WriteFieldBegin("personException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:personException: ", p), err) }
    if err := p.PersonException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PersonException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:personException: ", p), err) }
  }
  return err
}

func (p *PersonServiceSavePersonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PersonServiceSavePersonResult(%+v)", *p)
}


